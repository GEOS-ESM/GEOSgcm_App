#!/bin/csh -f

#######################################################################
#                     Batch Parameters for Run Job
#######################################################################

#@BATCH_TIME@RUN_FT
#@RUN_FP
#@BATCH_JOBNAME@RUN_FN_&DATE
#@RUN_Q
#@BATCH_GROUP
#@BATCH_OUTPUTNAMEFCSTOUT

#######################################################################
#                  System Environment Variables
#######################################################################

umask 022

limit stacksize unlimited

#######################################################################
#           Architecture Specific Environment Variables
#######################################################################

setenv ARCH `uname`

setenv SITE             @SITE
setenv GEOSDIR          @GEOSDIR 
setenv GEOSBIN          @GEOSBIN 
setenv GEOSETC          @GEOSETC 
setenv GEOSUTIL         @GEOSSRC

source $GEOSBIN/g5_modules
setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${BASEDIR}/${ARCH}/lib:${GEOSDIR}/lib

setenv RUN_CMD "$GEOSBIN/esma_mpirun -np "

#######################################################################
#             Experiment Specific Environment Variables
#######################################################################


setenv  EXPID   @EXPID
setenv  EXPDIR  @EXPDIR
setenv  HOMDIR  @HOMDIR

#######################################################################
#                  Set Forecast Run Parameters
#######################################################################

set date = `echo &DATE 000000`

set        NFMAX = &NFMAX
set     FSEGMENT = &FSEGMENT
set    FCST_TYPE = &FCST_TYPE
set    FCST_LABL = &FCST_LABL
set      FCST_ID = ${EXPID}_FCST
set       CYCLED = &cycled

set STATS_ONLY = FALSE

#######################################################################
#                 Create Forecast Sub-Directory
#######################################################################

     @  NFCST  = 1
while( $NFCST <= $NFMAX )

set date0 = $date[1]
set time0 = $date[2]
set hour  = `echo $time0 | cut -c1-2`
set fdate = ${date0}_${hour}z

setenv   FCSTDIR  $EXPDIR/forecasts/${FCST_LABL}_$fdate
setenv    SCRDIR  $FCSTDIR/scratch
if (! -e $SCRDIR ) mkdir -p $SCRDIR
cd       $SCRDIR

/bin/rm -rf *

set date  = `$GEOSUTIL/post/tick $date0 $time0 -10800`
set nymd0 = $date[1]
set nhms0 = $date[2]
set hour  = `echo $nhms0 | cut -c1-2`

if( $STATS_ONLY != TRUE ) then

##################################################################
######      Create STRIP Utility for File Modifications
######           (Removes formatted BLANK spaces)
##################################################################

set      FILE = strip
/bin/rm $FILE
cat << EOF > $FILE
#!/bin/ksh
/bin/mv \$1 \$1.tmp
touch   \$1
while read line
do
echo \$line >> \$1
done < \$1.tmp
exit
EOF
chmod +x $FILE

#######################################################################
#                 Set Model Resolution Parameters
#######################################################################

set       NX  = `grep      "^ *NX:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set       NY  = `grep      "^ *NY:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set  AGCM_IM  = `grep      "AGCM_IM:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set  AGCM_JM  = `grep      "AGCM_JM:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set  AGCM_LM  = `grep      "AGCM_LM:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set  OGCM_IM  = `grep      "OGCM\.IM_WORLD:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set  OGCM_JM  = `grep      "OGCM\.JM_WORLD:" $HOMDIR/AGCM.rc | cut -d':' -f2`
set USE_SHMEM = `grep USE_SHMEM: $HOMDIR/CAP.rc  | cut -d':' -f2`

# Set ATMOS and OCEAN Horizontal Resolution Tags
# ----------------------------------------------
set AGCM_IM_Tag = `echo $AGCM_IM | awk '{printf "%4.4i", $1}'`
set AGCM_JM_Tag = `echo $AGCM_JM | awk '{printf "%4.4i", $1}'`
set OGCM_IM_Tag = `echo $OGCM_IM | awk '{printf "%4.4i", $1}'`
set OGCM_JM_Tag = `echo $OGCM_JM | awk '{printf "%4.4i", $1}'`

>>>FVCUBED<<<set ATMOStag = CF${AGCM_IM_Tag}x6C
>>>DATAOCEAN<<<set OCEANtag = DE${OGCM_IM_Tag}xPE${OGCM_JM_Tag}
>>>COUPLED<<<set OCEANtag = TM${OGCM_IM_Tag}xTM${OGCM_JM_Tag}

# Calculate number of cores/nodes for IOSERVER
# --------------------------------------------

set USE_IOSERVER   = @USE_IOSERVER
set AGCM_IOS_NODES = `grep IOSERVER_NODES: $HOMDIR/AGCM.rc | cut -d':' -f2`

if ($USE_IOSERVER == 0) then
   set IOS_NODES = 0
else
   set IOS_NODES = $AGCM_IOS_NODES
endif

# Check for Over-Specification of CPU Resources
# ---------------------------------------------
if ($?SLURM_NTASKS) then
   set  NCPUS = $SLURM_NTASKS
else if ($?PBS_NODEFILE) then
   set  NCPUS = `cat $PBS_NODEFILE | wc -l`
else
   set  NCPUS = NULL
endif

@ MODEL_NPES = $NX * $NY

if ( $NCPUS != NULL ) then

   if ( $USE_IOSERVER == 1 ) then

      set NCPUS_PER_NODE = @NCPUS_PER_NODE

      @ NODES  = `echo "( ($MODEL_NPES + $NCPUS_PER_NODE) + ($AGCM_IOS_NODES * $NCPUS_PER_NODE) - 1)/$NCPUS_PER_NODE" | bc`
      @ NPES   = $NODES * $NCPUS_PER_NODE

      if( $NPES > $NCPUS ) then
         echo "CPU Resources are Over-Specified"
         echo "--------------------------------"
         echo "Allotted  NCPUs: $NCPUS"
         echo "Requested NCPUs: $NPES"
         echo ""
         echo "Specified NX: $NX"
         echo "Specified NY: $NY"
         echo ""
         echo "Specified IOSERVER_NODES: $AGCM_IOS_NODES"
         echo "Specified cores per node: $NCPUS_PER_NODE"
         exit
      endif

   else

      @ NPES = $MODEL_NPES

      if( $NPES > $NCPUS ) then
         echo "CPU Resources are Over-Specified"
         echo "--------------------------------"
         echo "Allotted  NCPUs: $NCPUS"
         echo "Requested NCPUs: $NPES"
         echo ""
         echo "Specified NX: $NX"
         echo "Specified NY: $NY"
         exit
      endif

   endif

else
   # This is for the desktop path

   @ NPES = $MODEL_NPES

endif

#######################################################################
#            Copy and Modify RC Files from Home Directory
#######################################################################

                             /bin/ln -sf $EXPDIR/RC/* .
                             @CPEXEC -f  $HOMDIR/*.rc .
                             @CPEXEC -f  $HOMDIR/*.nml .
                             @CPEXEC -f  $HOMDIR/*.yaml .

                             cat fvcore_layout.rc >> input.nml

echo $nymd0 $nhms0 > cap_restart

@CPEXEC  CAP.rc  CAP.rc.orig


# Turn Off Intermediate Restarts
# ------------------------------
./strip AGCM.rc
set oldstring =  `cat AGCM.rc | grep _FREQUENCY: | grep -v BKG_FREQUENCY:`
set newstring =  "#RECORD_FREQUENCY:"
/bin/mv -f AGCM.rc AGCM.tmp
cat AGCM.tmp | sed -e "s?$oldstring?$newstring?g" > AGCM.rc

./strip AGCM.rc
set oldstring =  `cat AGCM.rc | grep _REF_DATE: | grep -v REPLAY_REF_DATE:`
set newstring =  "#RECORD_REF_DATE:"
/bin/mv -f AGCM.rc AGCM.tmp
cat AGCM.tmp | sed -e "s?$oldstring?$newstring?g" > AGCM.rc

./strip AGCM.rc
set oldstring =  `cat AGCM.rc | grep _REF_TIME: | grep -v REPLAY_REF_TIME:`
set newstring =  "#RECORD_REF_TIME:"
/bin/mv -f AGCM.rc AGCM.tmp
cat AGCM.tmp | sed -e "s?$oldstring?$newstring?g" > AGCM.rc


# Shut-Off REPLAY after 6-hours
# -----------------------------
        ./strip AGCM.rc
        set oldstring =  `cat AGCM.rc | grep REPLAY_SHUTOFF: `
        set newstring =  "REPLAY_SHUTOFF: 21600"
        /bin/mv -f AGCM.rc AGCM.tmp
        if( $#oldstring == 0 ) then
            cat AGCM.tmp     > AGCM.rc
            echo $newstring >> AGCM.rc
        else
            if( `echo $oldstring | wc -l` == 1 ) then
                 cat AGCM.tmp | sed -e "s?$oldstring?$newstring?g" > AGCM.rc
            else
                 echo ERROR:  Multiple occurrences of REPLAY_SHUTOFF:
                 foreach string ($oldstring)
                   echo $string
                 end
                 exit
             endif
        endif

#######################################################################
#                 Create Forecast History RC Files
#######################################################################

set HIST_IM  = `expr $AGCM_IM \* 4`
set HIST_JM  = `expr $AGCM_IM \* 2 + 1`

set         FILE = HISTORY.rc
/bin/rm -f $FILE
cat << _EOF_ > $FILE

VERSION: 1
EXPID:  ${EXPID}_FCST
EXPDSC: Forecasts_spawned_from_${EXPID}

COLLECTIONS: 'geosgcm_fcst'
             'geosgcm_surf'
             ::
             'tavg1_2d_flx_Mx'

GRID_LABELS: PC${HIST_IM}x${HIST_JM}-DC
 ::


  PC${HIST_IM}x${HIST_JM}-DC.GRID_TYPE: LatLon
  PC${HIST_IM}x${HIST_JM}-DC.IM_WORLD: ${HIST_IM}
  PC${HIST_IM}x${HIST_JM}-DC.JM_WORLD: ${HIST_JM}
  PC${HIST_IM}x${HIST_JM}-DC.POLE: PC
  PC${HIST_IM}x${HIST_JM}-DC.DATELINE: DC
  PC${HIST_IM}x${HIST_JM}-DC.LM: ${AGCM_LM}

  geosgcm_fcst.template:  '%y4%m2%d2_%h2%n2z.nc4',
  geosgcm_fcst.archive:   '%c/Y%y4',
  geosgcm_fcst.format:    'CFIO',
  geosgcm_fcst.frequency:  060000,
  geosgcm_fcst.duration:   000000,
  geosgcm_fcst.grid_label: PC${HIST_IM}x${HIST_JM}-DC,
  geosgcm_fcst.vscale:     100.0,
  geosgcm_fcst.vunit:     'hPa',
  geosgcm_fcst.vvars:     'log(PLE)' , 'DYN'          ,
  geosgcm_fcst.levels:     1000 975 950 925 900 850 800 750 700 600 500 400 300 250 200 150 100 70 50 30 10 7 5 3 1,
  geosgcm_fcst.fields:    'PHIS'     , 'AGCM'         ,
                          'SLP'      , 'DYN'          ,
                          'U;V'      , 'DYN'          ,
                          'T'        , 'DYN'          ,
                          'PS'       , 'DYN'          ,
                          'ZLE'      , 'DYN'          , 'H'   ,
                          'OMEGA'    , 'DYN'          ,
                          'Q'        , 'MOIST'        , 'QV'  ,
                          'RH2'      , 'MOIST'        , 'RH'  ,
                          ::

  geosgcm_surf.template:  '%y4%m2%d2_%h2%n2z.nc4',
  geosgcm_surf.archive:   '%c/Y%y4',
  geosgcm_surf.format:    'CFIO',
  geosgcm_surf.mode:      'time-averaged',
  geosgcm_surf.frequency:  030000,
  geosgcm_surf.duration:   000000,
  geosgcm_surf.grid_label: PC${HIST_IM}x${HIST_JM}-DC,
  geosgcm_surf.fields:    'PHIS'     , 'AGCM'         ,
                          'SLP'      , 'DYN'          ,
                          'PS'       , 'DYN'          ,
                          'DMDTDYN'  , 'DYN'          ,
                          'TQV'      , 'AGCM'         ,
                          'TQL'      , 'AGCM'         ,
                          'TQI'      , 'AGCM'         ,
                          'TPREC'    , 'MOIST'        ,
                          'CN_PRCP'  , 'MOIST'        , 'CNPRCP' ,
                          'LS_PRCP'  , 'MOIST'        , 'LSPRCP' ,
                          'AN_PRCP'  , 'MOIST'        , 'ANPRCP' ,
                          'CLDTT'    , 'SOLAR'        ,
                          'CLDLO'    , 'SOLAR'        ,
                          'CLDMD'    , 'SOLAR'        ,
                          'CLDHI'    , 'SOLAR'        ,
                          'OSR'      , 'SOLAR'        ,
                          'SLRSF'    , 'SOLAR'        , 'SWGDWN'    ,
                          'OLR'      , 'IRRAD'        ,
                          'LWS'      , 'IRRAD'        ,
                          'EVAP'     , 'SURFACE'      ,
                          'TS'       , 'SURFACE'      ,
                          'T2M'      , 'SURFACE'      ,
                          'Q2M'      , 'SURFACE'      , 'QV2M'    ,
                          'U10M;V10M', 'SURFACE'      ,
                          'ZPBL'     , 'TURBULENCE'   ,  'PBLH'   ,
                          ::

  tavg1_2d_flx_Mx.template:    '%y4%m2%d2_%h2%n2z.nc4' ,
  tavg1_2d_flx_Mx.archive:     '%c/Y%y4',
  tavg1_2d_flx_Mx.format:      'CFIO' ,
  tavg1_2d_flx_Mx.mode:        'time-averaged' ,
  tavg1_2d_flx_Mx.descr:       '2d,1-Hourly,Time-Averaged,Native Cubed-Sphere on Single-Level,Diagnostics' ,
  tavg1_2d_flx_Mx.nbits:       12 ,
  tavg1_2d_flx_Mx.chunksize:   ${AGCM_IM} ${AGCM_JM} 1 1,
  tavg1_2d_flx_Mx.cubeFormat:  0
  tavg1_2d_flx_Mx.deflate:     1,
  tavg1_2d_flx_Mx.frequency:   010000 ,
  tavg1_2d_flx_Mx.duration:    010000 ,
  tavg1_2d_flx_Mx.fields:       'AN_PRCP'  , 'MOIST'       , 'PRECANV' ,
                                'CN_PRCP'  , 'MOIST'       , 'PRECCON' ,
                                'LS_PRCP'  , 'MOIST'       , 'PRECLSC' ,
                                'TPREC'    , 'MOIST'       , 'PRECTOT' ,
                                'OSR'      , 'SOLAR'       , 'SWTUP'   ,
                                'OLR'      , 'IRRAD'       , 'LWTUP'   ,
                                'TQV'      , 'AGCM'        ,
                                'ZPBL'     , 'TURBULENCE'  ,  'PBLH'   ,
                                ::

_EOF_

#######################################################################
#              Create HISTORY Collection Directories
#######################################################################

set collections = ''
foreach line ("`cat HISTORY.rc`")
   set firstword  = `echo $line | awk '{print $1}'`
   set firstchar  = `echo $firstword | cut -c1`
   set secondword = `echo $line | awk '{print $2}'`

   if ( $firstword == "::" ) goto done

   if ( $firstchar != "#" ) then
      set collection  = `echo $firstword | sed -e "s/'//g"`
      set collections = `echo $collections $collection`
      if ( $secondword == :: ) goto done
   endif

   if ( $firstword == COLLECTIONS: ) then
      set collections = `echo $secondword | sed -e "s/'//g"`
   endif
end

done:

#######################################################################
#                        Link Boundary Datasets
#######################################################################

setenv BCSDIR    @BCSDIR
setenv SSTDIR    @SSTDIR
setenv CHMDIR    @CHMDIR
setenv BCRSLV    @ATMOStag_@OCEANtag
setenv DATELINE  DC
setenv EMISSIONS @EMISSIONS

set             FILE = linkbcs
/bin/rm -f     $FILE
cat << _EOF_ > $FILE
#!/bin/csh -f

/bin/mkdir -p            ExtData
/bin/ln    -sf $CHMDIR/* ExtData

>>>DATAOCEAN<<</bin/ln -sf $BCSDIR/$BCRSLV/${BCRSLV}-Pfafstetter.til  tile.data
>>>DATAOCEAN<<<if(     -e  $BCSDIR/$BCRSLV/${BCRSLV}-Pfafstetter.TIL) then
>>>DATAOCEAN<<</bin/ln -sf $BCSDIR/$BCRSLV/${BCRSLV}-Pfafstetter.TIL  tile.bin
>>>DATAOCEAN<<<endif

# DAS or REPLAY Mode (AGCM.rc:  pchem_clim_years = 1-Year Climatology)
# --------------------------------------------------------------------
@OPS_SPECIES/bin/ln -sf $BCSDIR/Shared/pchem.species.Clim_Prod_Loss.z_721x72.nc4 species.data

# CMIP-5 Ozone Data (228-Years)
# -----------------------------
@CMIP_SPECIES/bin/ln -sf $BCSDIR/Shared/pchem.species.CMIP-5.1870-2097.z_91x72.nc4 species.data

# S2S pre-industrial with prod/loss of stratospheric water vapor
# (AGCM.rc:  pchem_clim_years = 3-Years,  and  H2O_ProdLoss: 1 )
# --------------------------------------------------------------
#/bin/ln -sf $BCSDIR/Shared/pchem.species.CMIP-6.wH2OandPL.1850s.z_91x72.nc4 species.data

# MERRA-2 Ozone Data (39-Years)
# -----------------------------
@MERRA2OX_SPECIES/bin/ln -sf $BCSDIR/Shared/pchem.species.CMIP-5.MERRA2OX.197902-201706.z_91x72.nc4 species.data

/bin/ln -sf $BCSDIR/Shared/*bin .
/bin/ln -sf $BCSDIR/Shared/*c2l*.nc4 .

/bin/ln -sf $BCSDIR/$BCRSLV/visdf_@RES_DATELINE.dat visdf.dat
/bin/ln -sf $BCSDIR/$BCRSLV/nirdf_@RES_DATELINE.dat nirdf.dat
/bin/ln -sf $BCSDIR/$BCRSLV/vegdyn_@RES_DATELINE.dat vegdyn.data
/bin/ln -sf $BCSDIR/$BCRSLV/lai_clim_@RES_DATELINE.data lai.data
/bin/ln -sf $BCSDIR/$BCRSLV/green_clim_@RES_DATELINE.data green.data
/bin/ln -sf $BCSDIR/$BCRSLV/ndvi_clim_@RES_DATELINE.data ndvi.data
/bin/ln -sf $BCSDIR/$BCRSLV/topo_DYN_ave_@RES_DATELINE.data topo_dynave.data
/bin/ln -sf $BCSDIR/$BCRSLV/topo_GWD_var_@RES_DATELINE.data topo_gwdvar.data
/bin/ln -sf $BCSDIR/$BCRSLV/topo_TRB_var_@RES_DATELINE.data topo_trbvar.data

>>>FVCUBED<<<if(     -e  $BCSDIR/$BCRSLV/Gnomonic_$BCRSLV.dat ) then
>>>FVCUBED<<</bin/ln -sf $BCSDIR/$BCRSLV/Gnomonic_$BCRSLV.dat .
>>>FVCUBED<<<endif

_EOF_

>>>DATAOCEAN<<<echo "/bin/ln -sf $SSTDIR"'/@SSTFILE   sst.data' >> $FILE
>>>DATAOCEAN<<<echo "/bin/ln -sf $SSTDIR"'/@ICEFILE fraci.data' >> $FILE
>>>DATAOCEAN<<<echo "/bin/ln -sf $SSTDIR"'/@KPARFILE SEAWIFS_KPAR_mon_clim.data' >> $FILE

chmod +x linkbcs
@CPEXEC  linkbcs $EXPDIR

##############################################################################
#                    Get Executable and RESTARTS 
##############################################################################

@CPEXEC $EXPDIR/GEOSgcm.x .

set rst_types = `cat AGCM.rc | grep "RESTART_FILE"    | cut -d ":" -f1 | cut -d "_" -f1-2`
set chk_types = `cat AGCM.rc | grep "CHECKPOINT_FILE" | cut -d ":" -f1 | cut -d "_" -f1-2`
set rst_files = `cat AGCM.rc | grep "RESTART_FILE"    | cut -d ":" -f2`
set chk_files = `cat AGCM.rc | grep "CHECKPOINT_FILE" | cut -d ":" -f2`

# Remove possible bootstrap parameter (+/-)
# -----------------------------------------
set dummy = `echo $rst_files`
set rst_files = ''
foreach rst ( $dummy )
  set length  = `echo $rst | awk '{print length($0)}'`
  set    bit  = `echo $rst | cut -c1`
  if(  "$bit" == "+" | \
       "$bit" == "-" ) set rst = `echo $rst | cut -c2-$length`
  set rst_files = `echo $rst_files $rst`
end

# Set REPLAYed Analysis
# ---------------------
     set ANA_EXPID    = `grep REPLAY_ANA_EXPID:    AGCM.rc | grep -v '#'   | cut -d: -f2`
     set ANA_LOCATION = `grep REPLAY_ANA_LOCATION: AGCM.rc | grep -v '#'   | cut -d: -f2`

# Copy Restarts to Scratch Directory
# ----------------------------------
     set year  = `echo $nymd0 | cut -c1-4`
     set month = `echo $nymd0 | cut -c5-6`

     if( $CYCLED == .TRUE. ) then
          /bin/ln -s $EXPDIR/restarts/*${nymd0}_${hour}*z.*  .
          $GEOSBIN/stripname ${EXPID}.
          $GEOSBIN/stripname .e${nymd0}_${hour}\*

     else if( $FCST_TYPE == 'Exact' | $FCST_TYPE == 'Regular' ) then
          /bin/ln -s ${ANA_LOCATION}/rs/Y$year/M$month/${ANA_EXPID}.rst.${nymd0}_${hour}z.tar  .
          @TAREXEC xf ${ANA_EXPID}.rst.${nymd0}_${hour}z.tar
          if( $FCST_TYPE == 'Exact' ) /bin/ln -s ${ANA_LOCATION}/rs/Y$year/M*/${ANA_EXPID}.agcm_import_rst.*  .
          $GEOSBIN/stripname ${ANA_EXPID}.
          $GEOSBIN/stripname .${nymd0}_${hour}z.bin
          $GEOSBIN/stripname .${nymd0}_${hour}z.nc4
          # Note: If Radiation Schemes differ, Radiation Restarts may need to be bootstrapped
          # ---------------------------------------------------------------------------------
          # /bin/rm solar_internal_rst
          # /bin/rm irrad_internal_rst
endif

# Re-Create Proper CAP.rc
# -----------------------
@CPEXEC CAP.rc.orig CAP.rc
./strip CAP.rc
set oldstring =  `cat CAP.rc | grep JOB_SGMT:`
set newstring =  "JOB_SGMT: $FSEGMENT 030000"
/bin/mv CAP.rc CAP.tmp
cat CAP.tmp | sed -e "s?$oldstring?$newstring?g" > CAP.rc

# Set Time Variables for Current_(c), Ending_(e), and Segment_(s) dates 
# ---------------------------------------------------------------------
set nymdc = `cat cap_restart | cut -c1-8`
set nhmsc = `cat cap_restart | cut -c10-15`
set nymde = `cat CAP.rc | grep END_DATE:     | cut -d: -f2 | cut -c2-9`
set nhmse = `cat CAP.rc | grep END_DATE:     | cut -d: -f2 | cut -c11-16`
set nymds = `cat CAP.rc | grep JOB_SGMT:     | cut -d: -f2 | cut -c2-9`
set nhmss = `cat CAP.rc | grep JOB_SGMT:     | cut -d: -f2 | cut -c11-16`

# Compute Time Variables at the Finish_(f) of current segment
# -----------------------------------------------------------
set nyear   = `echo $nymds | cut -c1-4`
set nmonth  = `echo $nymds | cut -c5-6`
set nday    = `echo $nymds | cut -c7-8`
set nhour   = `echo $nhmss | cut -c1-2`
set nminute = `echo $nhmss | cut -c3-4`
set nsec    = `echo $nhmss | cut -c5-6`
       @ dt = $nsec + 60 * $nminute + 3600 * $nhour + 86400 * $nday

set nymdf = $nymdc
set nhmsf = $nhmsc
set date  = `$GEOSBIN/tick $nymdf $nhmsf $dt`
set nymdf =  $date[1]
set nhmsf =  $date[2]
set year  = `echo $nymdf | cut -c1-4`
set month = `echo $nymdf | cut -c5-6`
set day   = `echo $nymdf | cut -c7-8`

     @  month = $month + $nmonth
while( $month > 12 )
     @  month = $month - 12
     @  year  = $year  + 1
end
     @  year  = $year  + $nyear
     @ nymdf  = $year * 10000 + $month * 100 + $day

if( $nymdf >  $nymde )    set nymdf = $nymde
if( $nymdf == $nymde )    then
    if( $nhmsf > $nhmse ) set nhmsf = $nhmse
endif

set yearc = `echo $nymdc | cut -c1-4`
set yearf = `echo $nymdf | cut -c1-4`

# Select proper MERRA-2 GOCART Emission RC Files
# (NOTE: MERRA2-DD has same transition date)
# ----------------------------------------------
if( ${EMISSIONS} == MERRA2 | \
    ${EMISSIONS} == MERRA2-DD ) then
    set MERRA2_Transition_Date = 20000401

    if( $nymdc < ${MERRA2_Transition_Date} ) then
         set MERRA2_EMISSIONS_DIRECTORY = $GEOSDIR/$ARCH/etc/$EMISSIONS/19600101-20000331
         if( $nymdf > ${MERRA2_Transition_Date} ) then
          set nymdf = ${MERRA2_Transition_Date}
          set oldstring = `cat CAP.rc | grep END_DATE:`
          set newstring = "END_DATE: $nymdf $nhmsf"
          /bin/mv CAP.rc CAP.tmp
                     cat CAP.tmp | sed -e "s?$oldstring?$newstring?g" > CAP.rc
         endif
    else
         set MERRA2_EMISSIONS_DIRECTORY = $GEOSDIR/$ARCH/etc/$EMISSIONS/20000401-present
    endif

    if( $AGCM_LM == 72 ) then
        @CPEXEC --remove-destination ${MERRA2_EMISSIONS_DIRECTORY}/*.rc .
    else
        set files =      `/bin/ls -1 ${MERRA2_EMISSIONS_DIRECTORY}/*.rc`
        foreach file ($files)
          /bin/rm -f   `basename $file`
          /bin/rm -f    dummy
          @CPEXEC $file dummy
              cat       dummy | sed -e "s|/L72/|/L${AGCM_LM}/|g" | sed -e "s|z72|z${AGCM_LM}|g" > `basename $file`
        end
    endif

endif

#######################################################################
#                 Create Binary Tile File from ASCII
#######################################################################

if(-e ExtData.rc )    /bin/rm -f   ExtData.rc
set  extdata_files = `/bin/ls -1 *_ExtData.rc`
cat $extdata_files > ExtData.rc 

# Link Boundary Conditions for Appropriate Date
# ---------------------------------------------
set year = `echo $date0 | cut -b1-4`
setenv YEAR $year
./linkbcs

if (! -e tile.bin) then
$GEOSBIN/binarytile.x tile.data tile.bin
endif

#######################################################################
#                Split Saltwater Restart if detected
#######################################################################

if ( (-e $SCRDIR/openwater_internal_rst) && (-e $SCRDIR/seaicethermo_internal_rst)) then
  echo "Saltwater internal state is already split, good to go!"
else
 if ( ( -e $SCRDIR/saltwater_internal_rst ) || ( -e $EXPDIR/saltwater_internal_rst) ) then

   echo "Found Saltwater internal state. Splitting..."

   # If saltwater_internal_rst is in EXPDIR move to SCRDIR
   # -----------------------------------------------------
   if ( -e $EXPDIR/saltwater_internal_rst ) /bin/mv $EXPDIR/saltwater_internal_rst $SCRDIR

   # The splitter script requires an OutData directory
   # -------------------------------------------------
   if (! -d OutData ) mkdir -p OutData

   # Run the script
   # --------------
   $RUN_CMD 1 $GEOSBIN/SaltIntSplitter tile.data $SCRDIR/saltwater_internal_rst

   # Move restarts
   # -------------
   /bin/mv OutData/openwater_internal_rst OutData/seaicethermo_internal_rst .

   # Remove OutData
   # --------------
   /bin/rmdir OutData

 else
   echo "Neither saltwater_internal_rst, nor openwater_internal_rst and seaicethermo_internal_rst were found. Abort!"
   exit 6
 endif    
endif    

##################################################################
######
######                     Perform Forecast
######
##################################################################

# Environment variables for MPI, etc
# ----------------------------------

@SETENVS

# Run bundleParser.py
#---------------------
python bundleParser.py


# If REPLAY, link necessary forcing files
# ---------------------------------------
set  REPLAY_MODE = `grep REPLAY_MODE: AGCM.rc | grep -v '#' | cut -d: -f2`
if( $REPLAY_MODE == 'Exact' | $REPLAY_MODE == 'Regular' ) then

     set REPLAY_FILE        = `grep REPLAY_FILE:   AGCM.rc | grep -v '#'   | cut -d: -f2`
     set REPLAY_FILE09      = `grep REPLAY_FILE09: AGCM.rc | grep -v '#'   | cut -d: -f2`
     set REPLAY_FILE_TYPE   = `echo $REPLAY_FILE           | cut -d"/" -f1 | grep -v %`
     set REPLAY_FILE09_TYPE = `echo $REPLAY_FILE09         | cut -d"/" -f1 | grep -v %`

     # Modify GAAS_GridComp.rc and Link REPLAY files
     # ---------------------------------------------
     /bin/mv -f GAAS_GridComp.rc GAAS_GridComp.tmp
     cat GAAS_GridComp.tmp | sed -e "s?aod/Y%y4/M%m2/@ANA_EXPID.?aod/Y%y4/M%m2/${ANA_EXPID}.?g" > GAAS_GridComp.rc

     /bin/ln -sf ${ANA_LOCATION}/aod .
     /bin/ln -sf ${ANA_LOCATION}/${REPLAY_FILE_TYPE} .
     /bin/ln -sf ${ANA_LOCATION}/${REPLAY_FILE09_TYPE} .

endif

# Establish safe default number of OpenMP threads
# -----------------------------------------------
setenv OMP_NUM_THREADS 1

# Run GEOSgcm.x
# -------------
if( $USE_SHMEM == 1 ) $GEOSBIN/RmShmKeys_sshmpi.csh >& /dev/null

if( $USE_IOSERVER == 1) then
   set IOSERVER_OPTIONS = "--npes_model $MODEL_NPES --nodes_output_server $IOS_NODES"
else
   set IOSERVER_OPTIONS = ""
endif

$RUN_CMD $NPES ./GEOSgcm.x $IOSERVER_OPTIONS --logging_config 'logging.yaml'

if( $USE_SHMEM == 1 ) $GEOSBIN/RmShmKeys_sshmpi.csh >& /dev/null

if( -e EGRESS ) then
#   /bin/rm $EXPDIR/restarts/*${nymd0}_${hour}*z.*  .
endif
 
#######################################################################
#               Move HISTORY Files to Holding Directory
#######################################################################

foreach collection ( $collections )
  /bin/mv `/bin/ls -1 *.${collection}.*` $FCSTDIR
end

#######################################################################
#                               Create STATS
#######################################################################

endif  # End STATS_ONLY Test

set nymd     =  $date0
set yyyymm   = `echo $nymd | cut -b1-6`
  @ TMPVAL = &FLOOP - 1
set FDAYS  = `printf "%02d" $TMPVAL`

set statsdir = $EXPDIR/forecasts/${FCST_LABL}.stats.$yyyymm.f${FDAYS}day
mkdir -p $statsdir
cd       $statsdir

set year0      = `echo $nymd | cut -b1-4`
set month0     = `echo $nymd | cut -b5-6`
set fcst_files = `/bin/ls -1 $FCSTDIR/${FCST_ID}.geosgcm_fcst*nc4`

set ana_files = ''
@ n = 1
while ($n <= &FLOOP)

set year  = `echo $nymd | cut -b1-4`
set month = `echo $nymd | cut -b5-6`


# G5REPLAY Verification
# ---------------------
if( $CYCLED == .TRUE. ) then
     set next = `/bin/ls -1 $EXPDIR/holding/geosgcm_prog/${year}*/$EXPID.geosgcm_prog.${nymd}*nc4`
else
     set next = `/bin/ls -1 ${ANA_LOCATION}/asm/Y$year/M$month/${ANA_EXPID}.inst3_3d_asm_Np.${nymd}*nc4`
endif

set ana_files = `echo ${ana_files} $next`
set date = `$GEOSUTIL/post/tick $nymd 0 86400`
set nymd = $date[1]
@ n = $n + 1
end

$RUN_CMD 1 $GEOSUTIL/bin/stats.x -fcst $fcst_files \
                                  -ana   $ana_files \
                                  -cli $SHARE/gmao_ops/verification/stats/MERRA-2.inst3_3d_asm_Np.198501_201412.clim_00z.576x361.data.nc4 \
                                       $SHARE/gmao_ops/verification/stats/MERRA-2.inst3_3d_asm_Np.198501_201412.clim_06z.576x361.data.nc4 \
                                       $SHARE/gmao_ops/verification/stats/MERRA-2.inst3_3d_asm_Np.198501_201412.clim_12z.576x361.data.nc4 \
                                       $SHARE/gmao_ops/verification/stats/MERRA-2.inst3_3d_asm_Np.198501_201412.clim_18z.576x361.data.nc4 \
                                  -tag $EXPID -nfreq 060000 -rc $GEOSUTIL/post/stats.rc -fhour &FHRS

#######################################################################
#                         Update Forecast Counter
#######################################################################

#/bin/rm  -r $SCRDIR
 @ NFCST  = $NFCST + 1
set date  = `$GEOSUTIL/post/tick $date0 $time0 86400`
end
